export type AuthFunction = (email: string, password: string) => void;

// reference: /src/store/queries.ts: select property
// Can't use the autogenerated types since I have complex queries.
export type Element = "Anemo" | "Geo" | "Electro" | "Hydro" | "Cryo" | "Pyro" | "Dendro";
export type WeaponType = "Sword" | "Claymore" | "Spear" | "Catalyst" | "Bow";

export type StatValue = { value: number, stat: { abbreviation: string }, };
export type Ascension = 0 | 1 | 2 | 3 | 4 | 5 | 6 ;
export type AscensionValue = { stat?: StatValue, values: number[], };
export type AscensionValueFactor = { ascension?: Ascension, factor: number, };
export type AscensionMultipler = { ascension?: Ascension, multiplier: 0 | 1 | 2 | 3 | 4 };
export type LevelMultiplier = { regression_factors: number[], };

export type Character = {
	id: number,
	name: string,
	rarity: 4 | 5,
	element: Element,
	weapon_type: WeaponType,
	base_hp: StatValue,
	base_atk: StatValue,
	base_def: StatValue,
	ascension_base: StatValue,
	hp_ascension_value: AscensionValue,
	atk_ascension_value: AscensionValue,
	def_ascension_value: AscensionValue,
	level_multiplier: LevelMultiplier,
};

export type Store = {
	// reference: /src/store/queries.ts: table property
	Characters: Character[],
	AscensionValueFactors: AscensionValueFactor[],
	AscensionMultipliers: AscensionMultipler[],
};
export type StoreEvent = 'ready';
export type StoreSubscriber = (store: Store) => void;
export type SubscriptionRecord = { name: string, func: StoreSubscriber };
export type StoreSubscribersByEvent = Record<StoreEvent, SubscriptionRecord[]>;
