/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/ArtifactCopies": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ArtifactCopies.id"];
          owner?: parameters["rowFilter.ArtifactCopies.owner"];
          artifact_id?: parameters["rowFilter.ArtifactCopies.artifact_id"];
          level?: parameters["rowFilter.ArtifactCopies.level"];
          main_stat?: parameters["rowFilter.ArtifactCopies.main_stat"];
          sub_stat1?: parameters["rowFilter.ArtifactCopies.sub_stat1"];
          sub_stat2?: parameters["rowFilter.ArtifactCopies.sub_stat2"];
          sub_stat3?: parameters["rowFilter.ArtifactCopies.sub_stat3"];
          sub_stat4?: parameters["rowFilter.ArtifactCopies.sub_stat4"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ArtifactCopies"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ArtifactCopies */
          ArtifactCopies?: definitions["ArtifactCopies"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ArtifactCopies.id"];
          owner?: parameters["rowFilter.ArtifactCopies.owner"];
          artifact_id?: parameters["rowFilter.ArtifactCopies.artifact_id"];
          level?: parameters["rowFilter.ArtifactCopies.level"];
          main_stat?: parameters["rowFilter.ArtifactCopies.main_stat"];
          sub_stat1?: parameters["rowFilter.ArtifactCopies.sub_stat1"];
          sub_stat2?: parameters["rowFilter.ArtifactCopies.sub_stat2"];
          sub_stat3?: parameters["rowFilter.ArtifactCopies.sub_stat3"];
          sub_stat4?: parameters["rowFilter.ArtifactCopies.sub_stat4"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ArtifactCopies.id"];
          owner?: parameters["rowFilter.ArtifactCopies.owner"];
          artifact_id?: parameters["rowFilter.ArtifactCopies.artifact_id"];
          level?: parameters["rowFilter.ArtifactCopies.level"];
          main_stat?: parameters["rowFilter.ArtifactCopies.main_stat"];
          sub_stat1?: parameters["rowFilter.ArtifactCopies.sub_stat1"];
          sub_stat2?: parameters["rowFilter.ArtifactCopies.sub_stat2"];
          sub_stat3?: parameters["rowFilter.ArtifactCopies.sub_stat3"];
          sub_stat4?: parameters["rowFilter.ArtifactCopies.sub_stat4"];
        };
        body: {
          /** ArtifactCopies */
          ArtifactCopies?: definitions["ArtifactCopies"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ArtifactSets": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ArtifactSets.id"];
          name?: parameters["rowFilter.ArtifactSets.name"];
          one_piece_bonus?: parameters["rowFilter.ArtifactSets.one_piece_bonus"];
          two_piece_bonus?: parameters["rowFilter.ArtifactSets.two_piece_bonus"];
          four_piece_bonus?: parameters["rowFilter.ArtifactSets.four_piece_bonus"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ArtifactSets"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ArtifactSets */
          ArtifactSets?: definitions["ArtifactSets"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ArtifactSets.id"];
          name?: parameters["rowFilter.ArtifactSets.name"];
          one_piece_bonus?: parameters["rowFilter.ArtifactSets.one_piece_bonus"];
          two_piece_bonus?: parameters["rowFilter.ArtifactSets.two_piece_bonus"];
          four_piece_bonus?: parameters["rowFilter.ArtifactSets.four_piece_bonus"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ArtifactSets.id"];
          name?: parameters["rowFilter.ArtifactSets.name"];
          one_piece_bonus?: parameters["rowFilter.ArtifactSets.one_piece_bonus"];
          two_piece_bonus?: parameters["rowFilter.ArtifactSets.two_piece_bonus"];
          four_piece_bonus?: parameters["rowFilter.ArtifactSets.four_piece_bonus"];
        };
        body: {
          /** ArtifactSets */
          ArtifactSets?: definitions["ArtifactSets"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Artifacts": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Artifacts.id"];
          created_at?: parameters["rowFilter.Artifacts.created_at"];
          set?: parameters["rowFilter.Artifacts.set"];
          rarity?: parameters["rowFilter.Artifacts.rarity"];
          type?: parameters["rowFilter.Artifacts.type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Artifacts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Artifacts */
          Artifacts?: definitions["Artifacts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Artifacts.id"];
          created_at?: parameters["rowFilter.Artifacts.created_at"];
          set?: parameters["rowFilter.Artifacts.set"];
          rarity?: parameters["rowFilter.Artifacts.rarity"];
          type?: parameters["rowFilter.Artifacts.type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Artifacts.id"];
          created_at?: parameters["rowFilter.Artifacts.created_at"];
          set?: parameters["rowFilter.Artifacts.set"];
          rarity?: parameters["rowFilter.Artifacts.rarity"];
          type?: parameters["rowFilter.Artifacts.type"];
        };
        body: {
          /** Artifacts */
          Artifacts?: definitions["Artifacts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/AscensionMultipliers": {
    get: {
      parameters: {
        query: {
          ascension?: parameters["rowFilter.AscensionMultipliers.ascension"];
          multiplier?: parameters["rowFilter.AscensionMultipliers.multiplier"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["AscensionMultipliers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** AscensionMultipliers */
          AscensionMultipliers?: definitions["AscensionMultipliers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          ascension?: parameters["rowFilter.AscensionMultipliers.ascension"];
          multiplier?: parameters["rowFilter.AscensionMultipliers.multiplier"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          ascension?: parameters["rowFilter.AscensionMultipliers.ascension"];
          multiplier?: parameters["rowFilter.AscensionMultipliers.multiplier"];
        };
        body: {
          /** AscensionMultipliers */
          AscensionMultipliers?: definitions["AscensionMultipliers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/AscensionValueFactors": {
    get: {
      parameters: {
        query: {
          ascension?: parameters["rowFilter.AscensionValueFactors.ascension"];
          factor?: parameters["rowFilter.AscensionValueFactors.factor"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["AscensionValueFactors"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** AscensionValueFactors */
          AscensionValueFactors?: definitions["AscensionValueFactors"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          ascension?: parameters["rowFilter.AscensionValueFactors.ascension"];
          factor?: parameters["rowFilter.AscensionValueFactors.factor"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          ascension?: parameters["rowFilter.AscensionValueFactors.ascension"];
          factor?: parameters["rowFilter.AscensionValueFactors.factor"];
        };
        body: {
          /** AscensionValueFactors */
          AscensionValueFactors?: definitions["AscensionValueFactors"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/AscensionValues": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.AscensionValues.id"];
          values?: parameters["rowFilter.AscensionValues.values"];
          stat?: parameters["rowFilter.AscensionValues.stat"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["AscensionValues"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** AscensionValues */
          AscensionValues?: definitions["AscensionValues"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.AscensionValues.id"];
          values?: parameters["rowFilter.AscensionValues.values"];
          stat?: parameters["rowFilter.AscensionValues.stat"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.AscensionValues.id"];
          values?: parameters["rowFilter.AscensionValues.values"];
          stat?: parameters["rowFilter.AscensionValues.stat"];
        };
        body: {
          /** AscensionValues */
          AscensionValues?: definitions["AscensionValues"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/BaseStatValues": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.BaseStatValues.id"];
          stat?: parameters["rowFilter.BaseStatValues.stat"];
          value?: parameters["rowFilter.BaseStatValues.value"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["BaseStatValues"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** BaseStatValues */
          BaseStatValues?: definitions["BaseStatValues"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.BaseStatValues.id"];
          stat?: parameters["rowFilter.BaseStatValues.stat"];
          value?: parameters["rowFilter.BaseStatValues.value"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.BaseStatValues.id"];
          stat?: parameters["rowFilter.BaseStatValues.stat"];
          value?: parameters["rowFilter.BaseStatValues.value"];
        };
        body: {
          /** BaseStatValues */
          BaseStatValues?: definitions["BaseStatValues"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Builds": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Builds.id"];
          name?: parameters["rowFilter.Builds.name"];
          description?: parameters["rowFilter.Builds.description"];
          owner?: parameters["rowFilter.Builds.owner"];
          weapon?: parameters["rowFilter.Builds.weapon"];
          flower?: parameters["rowFilter.Builds.flower"];
          feather?: parameters["rowFilter.Builds.feather"];
          sands?: parameters["rowFilter.Builds.sands"];
          goblet?: parameters["rowFilter.Builds.goblet"];
          circlet?: parameters["rowFilter.Builds.circlet"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Builds"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Builds */
          Builds?: definitions["Builds"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Builds.id"];
          name?: parameters["rowFilter.Builds.name"];
          description?: parameters["rowFilter.Builds.description"];
          owner?: parameters["rowFilter.Builds.owner"];
          weapon?: parameters["rowFilter.Builds.weapon"];
          flower?: parameters["rowFilter.Builds.flower"];
          feather?: parameters["rowFilter.Builds.feather"];
          sands?: parameters["rowFilter.Builds.sands"];
          goblet?: parameters["rowFilter.Builds.goblet"];
          circlet?: parameters["rowFilter.Builds.circlet"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Builds.id"];
          name?: parameters["rowFilter.Builds.name"];
          description?: parameters["rowFilter.Builds.description"];
          owner?: parameters["rowFilter.Builds.owner"];
          weapon?: parameters["rowFilter.Builds.weapon"];
          flower?: parameters["rowFilter.Builds.flower"];
          feather?: parameters["rowFilter.Builds.feather"];
          sands?: parameters["rowFilter.Builds.sands"];
          goblet?: parameters["rowFilter.Builds.goblet"];
          circlet?: parameters["rowFilter.Builds.circlet"];
        };
        body: {
          /** Builds */
          Builds?: definitions["Builds"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/CharacterCopies": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.CharacterCopies.id"];
          owner?: parameters["rowFilter.CharacterCopies.owner"];
          ascension?: parameters["rowFilter.CharacterCopies.ascension"];
          level?: parameters["rowFilter.CharacterCopies.level"];
          constellations?: parameters["rowFilter.CharacterCopies.constellations"];
          default_build?: parameters["rowFilter.CharacterCopies.default_build"];
          copy_of?: parameters["rowFilter.CharacterCopies.copy_of"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["CharacterCopies"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** CharacterCopies */
          CharacterCopies?: definitions["CharacterCopies"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.CharacterCopies.id"];
          owner?: parameters["rowFilter.CharacterCopies.owner"];
          ascension?: parameters["rowFilter.CharacterCopies.ascension"];
          level?: parameters["rowFilter.CharacterCopies.level"];
          constellations?: parameters["rowFilter.CharacterCopies.constellations"];
          default_build?: parameters["rowFilter.CharacterCopies.default_build"];
          copy_of?: parameters["rowFilter.CharacterCopies.copy_of"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.CharacterCopies.id"];
          owner?: parameters["rowFilter.CharacterCopies.owner"];
          ascension?: parameters["rowFilter.CharacterCopies.ascension"];
          level?: parameters["rowFilter.CharacterCopies.level"];
          constellations?: parameters["rowFilter.CharacterCopies.constellations"];
          default_build?: parameters["rowFilter.CharacterCopies.default_build"];
          copy_of?: parameters["rowFilter.CharacterCopies.copy_of"];
        };
        body: {
          /** CharacterCopies */
          CharacterCopies?: definitions["CharacterCopies"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Characters": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Characters.id"];
          name?: parameters["rowFilter.Characters.name"];
          rarity?: parameters["rowFilter.Characters.rarity"];
          element?: parameters["rowFilter.Characters.element"];
          weapon_type?: parameters["rowFilter.Characters.weapon_type"];
          base_hp?: parameters["rowFilter.Characters.base_hp"];
          base_atk?: parameters["rowFilter.Characters.base_atk"];
          base_def?: parameters["rowFilter.Characters.base_def"];
          ascension_base?: parameters["rowFilter.Characters.ascension_base"];
          hp_ascension_value?: parameters["rowFilter.Characters.hp_ascension_value"];
          atk_ascension_value?: parameters["rowFilter.Characters.atk_ascension_value"];
          def_ascension_value?: parameters["rowFilter.Characters.def_ascension_value"];
          level_multiplier?: parameters["rowFilter.Characters.level_multiplier"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Characters"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Characters */
          Characters?: definitions["Characters"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Characters.id"];
          name?: parameters["rowFilter.Characters.name"];
          rarity?: parameters["rowFilter.Characters.rarity"];
          element?: parameters["rowFilter.Characters.element"];
          weapon_type?: parameters["rowFilter.Characters.weapon_type"];
          base_hp?: parameters["rowFilter.Characters.base_hp"];
          base_atk?: parameters["rowFilter.Characters.base_atk"];
          base_def?: parameters["rowFilter.Characters.base_def"];
          ascension_base?: parameters["rowFilter.Characters.ascension_base"];
          hp_ascension_value?: parameters["rowFilter.Characters.hp_ascension_value"];
          atk_ascension_value?: parameters["rowFilter.Characters.atk_ascension_value"];
          def_ascension_value?: parameters["rowFilter.Characters.def_ascension_value"];
          level_multiplier?: parameters["rowFilter.Characters.level_multiplier"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Characters.id"];
          name?: parameters["rowFilter.Characters.name"];
          rarity?: parameters["rowFilter.Characters.rarity"];
          element?: parameters["rowFilter.Characters.element"];
          weapon_type?: parameters["rowFilter.Characters.weapon_type"];
          base_hp?: parameters["rowFilter.Characters.base_hp"];
          base_atk?: parameters["rowFilter.Characters.base_atk"];
          base_def?: parameters["rowFilter.Characters.base_def"];
          ascension_base?: parameters["rowFilter.Characters.ascension_base"];
          hp_ascension_value?: parameters["rowFilter.Characters.hp_ascension_value"];
          atk_ascension_value?: parameters["rowFilter.Characters.atk_ascension_value"];
          def_ascension_value?: parameters["rowFilter.Characters.def_ascension_value"];
          level_multiplier?: parameters["rowFilter.Characters.level_multiplier"];
        };
        body: {
          /** Characters */
          Characters?: definitions["Characters"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/LevelMultipliers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.LevelMultipliers.id"];
          regression_factors?: parameters["rowFilter.LevelMultipliers.regression_factors"];
          /** Description intended for admin use and distinction */
          description?: parameters["rowFilter.LevelMultipliers.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["LevelMultipliers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** LevelMultipliers */
          LevelMultipliers?: definitions["LevelMultipliers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.LevelMultipliers.id"];
          regression_factors?: parameters["rowFilter.LevelMultipliers.regression_factors"];
          /** Description intended for admin use and distinction */
          description?: parameters["rowFilter.LevelMultipliers.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.LevelMultipliers.id"];
          regression_factors?: parameters["rowFilter.LevelMultipliers.regression_factors"];
          /** Description intended for admin use and distinction */
          description?: parameters["rowFilter.LevelMultipliers.description"];
        };
        body: {
          /** LevelMultipliers */
          LevelMultipliers?: definitions["LevelMultipliers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Roles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Roles.id"];
          character?: parameters["rowFilter.Roles.character"];
          build?: parameters["rowFilter.Roles.build"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Roles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Roles */
          Roles?: definitions["Roles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Roles.id"];
          character?: parameters["rowFilter.Roles.character"];
          build?: parameters["rowFilter.Roles.build"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Roles.id"];
          character?: parameters["rowFilter.Roles.character"];
          build?: parameters["rowFilter.Roles.build"];
        };
        body: {
          /** Roles */
          Roles?: definitions["Roles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/SetBonuses": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.SetBonuses.id"];
          description?: parameters["rowFilter.SetBonuses.description"];
          set?: parameters["rowFilter.SetBonuses.set"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["SetBonuses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** SetBonuses */
          SetBonuses?: definitions["SetBonuses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.SetBonuses.id"];
          description?: parameters["rowFilter.SetBonuses.description"];
          set?: parameters["rowFilter.SetBonuses.set"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.SetBonuses.id"];
          description?: parameters["rowFilter.SetBonuses.description"];
          set?: parameters["rowFilter.SetBonuses.set"];
        };
        body: {
          /** SetBonuses */
          SetBonuses?: definitions["SetBonuses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/StatTypes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.StatTypes.id"];
          stat?: parameters["rowFilter.StatTypes.stat"];
          abbreviation?: parameters["rowFilter.StatTypes.abbreviation"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["StatTypes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** StatTypes */
          StatTypes?: definitions["StatTypes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.StatTypes.id"];
          stat?: parameters["rowFilter.StatTypes.stat"];
          abbreviation?: parameters["rowFilter.StatTypes.abbreviation"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.StatTypes.id"];
          stat?: parameters["rowFilter.StatTypes.stat"];
          abbreviation?: parameters["rowFilter.StatTypes.abbreviation"];
        };
        body: {
          /** StatTypes */
          StatTypes?: definitions["StatTypes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/StatValues": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.StatValues.id"];
          stat?: parameters["rowFilter.StatValues.stat"];
          description?: parameters["rowFilter.StatValues.description"];
          level?: parameters["rowFilter.StatValues.level"];
          value?: parameters["rowFilter.StatValues.value"];
          ascension?: parameters["rowFilter.StatValues.ascension"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["StatValues"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** StatValues */
          StatValues?: definitions["StatValues"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.StatValues.id"];
          stat?: parameters["rowFilter.StatValues.stat"];
          description?: parameters["rowFilter.StatValues.description"];
          level?: parameters["rowFilter.StatValues.level"];
          value?: parameters["rowFilter.StatValues.value"];
          ascension?: parameters["rowFilter.StatValues.ascension"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.StatValues.id"];
          stat?: parameters["rowFilter.StatValues.stat"];
          description?: parameters["rowFilter.StatValues.description"];
          level?: parameters["rowFilter.StatValues.level"];
          value?: parameters["rowFilter.StatValues.value"];
          ascension?: parameters["rowFilter.StatValues.ascension"];
        };
        body: {
          /** StatValues */
          StatValues?: definitions["StatValues"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/TeamPairs": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.TeamPairs.id"];
          name?: parameters["rowFilter.TeamPairs.name"];
          description?: parameters["rowFilter.TeamPairs.description"];
          owner?: parameters["rowFilter.TeamPairs.owner"];
          team1?: parameters["rowFilter.TeamPairs.team1"];
          team2?: parameters["rowFilter.TeamPairs.team2"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["TeamPairs"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** TeamPairs */
          TeamPairs?: definitions["TeamPairs"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.TeamPairs.id"];
          name?: parameters["rowFilter.TeamPairs.name"];
          description?: parameters["rowFilter.TeamPairs.description"];
          owner?: parameters["rowFilter.TeamPairs.owner"];
          team1?: parameters["rowFilter.TeamPairs.team1"];
          team2?: parameters["rowFilter.TeamPairs.team2"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.TeamPairs.id"];
          name?: parameters["rowFilter.TeamPairs.name"];
          description?: parameters["rowFilter.TeamPairs.description"];
          owner?: parameters["rowFilter.TeamPairs.owner"];
          team1?: parameters["rowFilter.TeamPairs.team1"];
          team2?: parameters["rowFilter.TeamPairs.team2"];
        };
        body: {
          /** TeamPairs */
          TeamPairs?: definitions["TeamPairs"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Teams": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Teams.id"];
          name?: parameters["rowFilter.Teams.name"];
          description?: parameters["rowFilter.Teams.description"];
          owner?: parameters["rowFilter.Teams.owner"];
          slot1?: parameters["rowFilter.Teams.slot1"];
          slot2?: parameters["rowFilter.Teams.slot2"];
          slot3?: parameters["rowFilter.Teams.slot3"];
          slot4?: parameters["rowFilter.Teams.slot4"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Teams"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Teams */
          Teams?: definitions["Teams"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Teams.id"];
          name?: parameters["rowFilter.Teams.name"];
          description?: parameters["rowFilter.Teams.description"];
          owner?: parameters["rowFilter.Teams.owner"];
          slot1?: parameters["rowFilter.Teams.slot1"];
          slot2?: parameters["rowFilter.Teams.slot2"];
          slot3?: parameters["rowFilter.Teams.slot3"];
          slot4?: parameters["rowFilter.Teams.slot4"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Teams.id"];
          name?: parameters["rowFilter.Teams.name"];
          description?: parameters["rowFilter.Teams.description"];
          owner?: parameters["rowFilter.Teams.owner"];
          slot1?: parameters["rowFilter.Teams.slot1"];
          slot2?: parameters["rowFilter.Teams.slot2"];
          slot3?: parameters["rowFilter.Teams.slot3"];
          slot4?: parameters["rowFilter.Teams.slot4"];
        };
        body: {
          /** Teams */
          Teams?: definitions["Teams"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/WeaponCopies": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.WeaponCopies.id"];
          weapon_id?: parameters["rowFilter.WeaponCopies.weapon_id"];
          level?: parameters["rowFilter.WeaponCopies.level"];
          refinement?: parameters["rowFilter.WeaponCopies.refinement"];
          owner?: parameters["rowFilter.WeaponCopies.owner"];
          ascension?: parameters["rowFilter.WeaponCopies.ascension"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["WeaponCopies"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** WeaponCopies */
          WeaponCopies?: definitions["WeaponCopies"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.WeaponCopies.id"];
          weapon_id?: parameters["rowFilter.WeaponCopies.weapon_id"];
          level?: parameters["rowFilter.WeaponCopies.level"];
          refinement?: parameters["rowFilter.WeaponCopies.refinement"];
          owner?: parameters["rowFilter.WeaponCopies.owner"];
          ascension?: parameters["rowFilter.WeaponCopies.ascension"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.WeaponCopies.id"];
          weapon_id?: parameters["rowFilter.WeaponCopies.weapon_id"];
          level?: parameters["rowFilter.WeaponCopies.level"];
          refinement?: parameters["rowFilter.WeaponCopies.refinement"];
          owner?: parameters["rowFilter.WeaponCopies.owner"];
          ascension?: parameters["rowFilter.WeaponCopies.ascension"];
        };
        body: {
          /** WeaponCopies */
          WeaponCopies?: definitions["WeaponCopies"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Weapons": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Weapons.id"];
          name?: parameters["rowFilter.Weapons.name"];
          description?: parameters["rowFilter.Weapons.description"];
          rarity?: parameters["rowFilter.Weapons.rarity"];
          type?: parameters["rowFilter.Weapons.type"];
          base_atk?: parameters["rowFilter.Weapons.base_atk"];
          atk_multiplier?: parameters["rowFilter.Weapons.atk_multiplier"];
          atk_ascension?: parameters["rowFilter.Weapons.atk_ascension"];
          ascension_base?: parameters["rowFilter.Weapons.ascension_base"];
          ascension_level_multiplier?: parameters["rowFilter.Weapons.ascension_level_multiplier"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Weapons"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Weapons */
          Weapons?: definitions["Weapons"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Weapons.id"];
          name?: parameters["rowFilter.Weapons.name"];
          description?: parameters["rowFilter.Weapons.description"];
          rarity?: parameters["rowFilter.Weapons.rarity"];
          type?: parameters["rowFilter.Weapons.type"];
          base_atk?: parameters["rowFilter.Weapons.base_atk"];
          atk_multiplier?: parameters["rowFilter.Weapons.atk_multiplier"];
          atk_ascension?: parameters["rowFilter.Weapons.atk_ascension"];
          ascension_base?: parameters["rowFilter.Weapons.ascension_base"];
          ascension_level_multiplier?: parameters["rowFilter.Weapons.ascension_level_multiplier"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Weapons.id"];
          name?: parameters["rowFilter.Weapons.name"];
          description?: parameters["rowFilter.Weapons.description"];
          rarity?: parameters["rowFilter.Weapons.rarity"];
          type?: parameters["rowFilter.Weapons.type"];
          base_atk?: parameters["rowFilter.Weapons.base_atk"];
          atk_multiplier?: parameters["rowFilter.Weapons.atk_multiplier"];
          atk_ascension?: parameters["rowFilter.Weapons.atk_ascension"];
          ascension_base?: parameters["rowFilter.Weapons.ascension_base"];
          ascension_level_multiplier?: parameters["rowFilter.Weapons.ascension_level_multiplier"];
        };
        body: {
          /** Weapons */
          Weapons?: definitions["Weapons"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  /** Actual instance of an artifact */
  ArtifactCopies: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    owner: string;
    /**
     * Note:
     * This is a Foreign Key to `Artifacts.id`.<fk table='Artifacts' column='id'/>
     */
    artifact_id: number;
    level: number;
    /**
     * Note:
     * This is a Foreign Key to `StatValues.id`.<fk table='StatValues' column='id'/>
     */
    main_stat: number;
    /**
     * Note:
     * This is a Foreign Key to `StatValues.id`.<fk table='StatValues' column='id'/>
     */
    sub_stat1?: number;
    /**
     * Note:
     * This is a Foreign Key to `StatValues.id`.<fk table='StatValues' column='id'/>
     */
    sub_stat2?: number;
    /**
     * Note:
     * This is a Foreign Key to `StatValues.id`.<fk table='StatValues' column='id'/>
     */
    sub_stat3?: number;
    /**
     * Note:
     * This is a Foreign Key to `StatValues.id`.<fk table='StatValues' column='id'/>
     */
    sub_stat4?: number;
  };
  /** Artifact sets in game */
  ArtifactSets: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    name: string;
    /**
     * Note:
     * This is a Foreign Key to `SetBonuses.id`.<fk table='SetBonuses' column='id'/>
     */
    one_piece_bonus?: number;
    /**
     * Note:
     * This is a Foreign Key to `SetBonuses.id`.<fk table='SetBonuses' column='id'/>
     */
    two_piece_bonus?: number;
    /**
     * Note:
     * This is a Foreign Key to `SetBonuses.id`.<fk table='SetBonuses' column='id'/>
     */
    four_piece_bonus?: number;
  };
  /** Data on individual artifacts */
  Artifacts: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at?: string;
    /**
     * Note:
     * This is a Foreign Key to `ArtifactSets.id`.<fk table='ArtifactSets' column='id'/>
     */
    set: number;
    rarity: number;
    type: "flower" | "feather" | "sands" | "goblet" | "circlet";
  };
  AscensionMultipliers: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    ascension: number;
    multiplier: number;
  };
  /** Used by characters to calculate the true value of their ascension value */
  AscensionValueFactors: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    ascension: number;
    factor: number;
  };
  /** If `value.length == 1` (i.e., for character), multiply `value[0]` by `AscensionFactor[characterCopy.ascension]` for true value. Else (i.e., for weapon), true value is `value[weaponCopy.weapon.rarity - 1]`. */
  AscensionValues: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    values: unknown[];
    /**
     * Note:
     * This is a Foreign Key to `StatTypes.id`.<fk table='StatTypes' column='id'/>
     */
    stat: number;
  };
  BaseStatValues: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Note:
     * This is a Foreign Key to `StatTypes.id`.<fk table='StatTypes' column='id'/>
     */
    stat: number;
    value: number;
  };
  Builds: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    name: string;
    description?: string;
    owner: string;
    /**
     * Note:
     * This is a Foreign Key to `WeaponCopies.id`.<fk table='WeaponCopies' column='id'/>
     */
    weapon: number;
    /**
     * Note:
     * This is a Foreign Key to `ArtifactCopies.id`.<fk table='ArtifactCopies' column='id'/>
     */
    flower?: number;
    /**
     * Note:
     * This is a Foreign Key to `ArtifactCopies.id`.<fk table='ArtifactCopies' column='id'/>
     */
    feather?: number;
    /**
     * Note:
     * This is a Foreign Key to `ArtifactCopies.id`.<fk table='ArtifactCopies' column='id'/>
     */
    sands?: number;
    /**
     * Note:
     * This is a Foreign Key to `ArtifactCopies.id`.<fk table='ArtifactCopies' column='id'/>
     */
    goblet?: number;
    /**
     * Note:
     * This is a Foreign Key to `ArtifactCopies.id`.<fk table='ArtifactCopies' column='id'/>
     */
    circlet?: number;
  };
  /** Actual instance of a character */
  CharacterCopies: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    owner: string;
    ascension: number;
    level: number;
    constellations: number;
    /**
     * Note:
     * This is a Foreign Key to `Builds.id`.<fk table='Builds' column='id'/>
     */
    default_build?: number;
    /**
     * Note:
     * This is a Foreign Key to `Characters.id`.<fk table='Characters' column='id'/>
     */
    copy_of: number;
  };
  /** Character data */
  Characters: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    name: string;
    rarity: number;
    element: "Anemo" | "Geo" | "Electro" | "Hydro" | "Cryo" | "Pyro" | "Dendro";
    weapon_type: "Sword" | "Claymore" | "Spear" | "Catalyst" | "Bow";
    /**
     * Note:
     * This is a Foreign Key to `BaseStatValues.id`.<fk table='BaseStatValues' column='id'/>
     */
    base_hp: number;
    /**
     * Note:
     * This is a Foreign Key to `BaseStatValues.id`.<fk table='BaseStatValues' column='id'/>
     */
    base_atk: number;
    /**
     * Note:
     * This is a Foreign Key to `BaseStatValues.id`.<fk table='BaseStatValues' column='id'/>
     */
    base_def: number;
    /**
     * Note:
     * This is a Foreign Key to `BaseStatValues.id`.<fk table='BaseStatValues' column='id'/>
     */
    ascension_base: number;
    /**
     * Note:
     * This is a Foreign Key to `AscensionValues.id`.<fk table='AscensionValues' column='id'/>
     */
    hp_ascension_value: number;
    /**
     * Note:
     * This is a Foreign Key to `AscensionValues.id`.<fk table='AscensionValues' column='id'/>
     */
    atk_ascension_value: number;
    /**
     * Note:
     * This is a Foreign Key to `AscensionValues.id`.<fk table='AscensionValues' column='id'/>
     */
    def_ascension_value: number;
    /**
     * Note:
     * This is a Foreign Key to `LevelMultipliers.id`.<fk table='LevelMultipliers' column='id'/>
     */
    level_multiplier: number;
  };
  LevelMultipliers: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    regression_factors: unknown[];
    /** Description intended for admin use and distinction */
    description?: string;
  };
  /** Pairs characters with builds in a team */
  Roles: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Note:
     * This is a Foreign Key to `CharacterCopies.id`.<fk table='CharacterCopies' column='id'/>
     */
    character: number;
    /**
     * Note:
     * This is a Foreign Key to `Builds.id`.<fk table='Builds' column='id'/>
     */
    build?: number;
  };
  /** Artifact set bonus descriptions */
  SetBonuses: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    description: string;
    /**
     * Note:
     * This is a Foreign Key to `ArtifactSets.id`.<fk table='ArtifactSets' column='id'/>
     */
    set: number;
  };
  /** The types of stats a character/weapon/artifact can have */
  StatTypes: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    stat: string;
    abbreviation: string;
  };
  /** Actual stat values of characters/weapons/artifacts */
  StatValues: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Note:
     * This is a Foreign Key to `StatTypes.id`.<fk table='StatTypes' column='id'/>
     */
    stat: number;
    description?: string;
    level?: unknown[];
    value: unknown[];
    ascension?: unknown[];
  };
  /** For spiral and events */
  TeamPairs: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    name: string;
    description?: string;
    owner: string;
    /**
     * Note:
     * This is a Foreign Key to `Teams.id`.<fk table='Teams' column='id'/>
     */
    team1: number;
    /**
     * Note:
     * This is a Foreign Key to `Teams.id`.<fk table='Teams' column='id'/>
     */
    team2: number;
  };
  /** Collection of roles */
  Teams: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    name: string;
    description?: string;
    owner: string;
    /**
     * Note:
     * This is a Foreign Key to `Roles.id`.<fk table='Roles' column='id'/>
     */
    slot1?: number;
    /**
     * Note:
     * This is a Foreign Key to `Roles.id`.<fk table='Roles' column='id'/>
     */
    slot2?: number;
    /**
     * Note:
     * This is a Foreign Key to `Roles.id`.<fk table='Roles' column='id'/>
     */
    slot3?: number;
    /**
     * Note:
     * This is a Foreign Key to `Roles.id`.<fk table='Roles' column='id'/>
     */
    slot4?: number;
  };
  /** Actual instance of a weapon */
  WeaponCopies: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Note:
     * This is a Foreign Key to `Weapons.id`.<fk table='Weapons' column='id'/>
     */
    weapon_id: number;
    level: number;
    refinement: number;
    owner: string;
    ascension: number;
  };
  /** Data on weapons */
  Weapons: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    name: string;
    description: string;
    rarity: number;
    type: "Sword" | "Claymore" | "Spear" | "Catalyst" | "Bow";
    /**
     * Note:
     * This is a Foreign Key to `BaseStatValues.id`.<fk table='BaseStatValues' column='id'/>
     */
    base_atk: number;
    /**
     * Note:
     * This is a Foreign Key to `LevelMultipliers.id`.<fk table='LevelMultipliers' column='id'/>
     */
    atk_multiplier: number;
    /**
     * Note:
     * This is a Foreign Key to `AscensionValues.id`.<fk table='AscensionValues' column='id'/>
     */
    atk_ascension: number;
    /**
     * Note:
     * This is a Foreign Key to `BaseStatValues.id`.<fk table='BaseStatValues' column='id'/>
     */
    ascension_base: number;
    /**
     * Note:
     * This is a Foreign Key to `LevelMultipliers.id`.<fk table='LevelMultipliers' column='id'/>
     */
    ascension_level_multiplier: number;
  };
}

export interface parameters {
  /** Preference */
  preferParams: "params=single-object";
  /** Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** Preference */
  preferCount: "count=none";
  /** Filtering Columns */
  select: string;
  /** On Conflict */
  on_conflict: string;
  /** Ordering */
  order: string;
  /** Limiting and Pagination */
  range: string;
  /** Limiting and Pagination */
  rangeUnit: string;
  /** Limiting and Pagination */
  offset: string;
  /** Limiting and Pagination */
  limit: string;
  /** ArtifactCopies */
  "body.ArtifactCopies": definitions["ArtifactCopies"];
  "rowFilter.ArtifactCopies.id": string;
  "rowFilter.ArtifactCopies.owner": string;
  "rowFilter.ArtifactCopies.artifact_id": string;
  "rowFilter.ArtifactCopies.level": string;
  "rowFilter.ArtifactCopies.main_stat": string;
  "rowFilter.ArtifactCopies.sub_stat1": string;
  "rowFilter.ArtifactCopies.sub_stat2": string;
  "rowFilter.ArtifactCopies.sub_stat3": string;
  "rowFilter.ArtifactCopies.sub_stat4": string;
  /** ArtifactSets */
  "body.ArtifactSets": definitions["ArtifactSets"];
  "rowFilter.ArtifactSets.id": string;
  "rowFilter.ArtifactSets.name": string;
  "rowFilter.ArtifactSets.one_piece_bonus": string;
  "rowFilter.ArtifactSets.two_piece_bonus": string;
  "rowFilter.ArtifactSets.four_piece_bonus": string;
  /** Artifacts */
  "body.Artifacts": definitions["Artifacts"];
  "rowFilter.Artifacts.id": string;
  "rowFilter.Artifacts.created_at": string;
  "rowFilter.Artifacts.set": string;
  "rowFilter.Artifacts.rarity": string;
  "rowFilter.Artifacts.type": string;
  /** AscensionMultipliers */
  "body.AscensionMultipliers": definitions["AscensionMultipliers"];
  "rowFilter.AscensionMultipliers.ascension": string;
  "rowFilter.AscensionMultipliers.multiplier": string;
  /** AscensionValueFactors */
  "body.AscensionValueFactors": definitions["AscensionValueFactors"];
  "rowFilter.AscensionValueFactors.ascension": string;
  "rowFilter.AscensionValueFactors.factor": string;
  /** AscensionValues */
  "body.AscensionValues": definitions["AscensionValues"];
  "rowFilter.AscensionValues.id": string;
  "rowFilter.AscensionValues.values": string;
  "rowFilter.AscensionValues.stat": string;
  /** BaseStatValues */
  "body.BaseStatValues": definitions["BaseStatValues"];
  "rowFilter.BaseStatValues.id": string;
  "rowFilter.BaseStatValues.stat": string;
  "rowFilter.BaseStatValues.value": string;
  /** Builds */
  "body.Builds": definitions["Builds"];
  "rowFilter.Builds.id": string;
  "rowFilter.Builds.name": string;
  "rowFilter.Builds.description": string;
  "rowFilter.Builds.owner": string;
  "rowFilter.Builds.weapon": string;
  "rowFilter.Builds.flower": string;
  "rowFilter.Builds.feather": string;
  "rowFilter.Builds.sands": string;
  "rowFilter.Builds.goblet": string;
  "rowFilter.Builds.circlet": string;
  /** CharacterCopies */
  "body.CharacterCopies": definitions["CharacterCopies"];
  "rowFilter.CharacterCopies.id": string;
  "rowFilter.CharacterCopies.owner": string;
  "rowFilter.CharacterCopies.ascension": string;
  "rowFilter.CharacterCopies.level": string;
  "rowFilter.CharacterCopies.constellations": string;
  "rowFilter.CharacterCopies.default_build": string;
  "rowFilter.CharacterCopies.copy_of": string;
  /** Characters */
  "body.Characters": definitions["Characters"];
  "rowFilter.Characters.id": string;
  "rowFilter.Characters.name": string;
  "rowFilter.Characters.rarity": string;
  "rowFilter.Characters.element": string;
  "rowFilter.Characters.weapon_type": string;
  "rowFilter.Characters.base_hp": string;
  "rowFilter.Characters.base_atk": string;
  "rowFilter.Characters.base_def": string;
  "rowFilter.Characters.ascension_base": string;
  "rowFilter.Characters.hp_ascension_value": string;
  "rowFilter.Characters.atk_ascension_value": string;
  "rowFilter.Characters.def_ascension_value": string;
  "rowFilter.Characters.level_multiplier": string;
  /** LevelMultipliers */
  "body.LevelMultipliers": definitions["LevelMultipliers"];
  "rowFilter.LevelMultipliers.id": string;
  "rowFilter.LevelMultipliers.regression_factors": string;
  /** Description intended for admin use and distinction */
  "rowFilter.LevelMultipliers.description": string;
  /** Roles */
  "body.Roles": definitions["Roles"];
  "rowFilter.Roles.id": string;
  "rowFilter.Roles.character": string;
  "rowFilter.Roles.build": string;
  /** SetBonuses */
  "body.SetBonuses": definitions["SetBonuses"];
  "rowFilter.SetBonuses.id": string;
  "rowFilter.SetBonuses.description": string;
  "rowFilter.SetBonuses.set": string;
  /** StatTypes */
  "body.StatTypes": definitions["StatTypes"];
  "rowFilter.StatTypes.id": string;
  "rowFilter.StatTypes.stat": string;
  "rowFilter.StatTypes.abbreviation": string;
  /** StatValues */
  "body.StatValues": definitions["StatValues"];
  "rowFilter.StatValues.id": string;
  "rowFilter.StatValues.stat": string;
  "rowFilter.StatValues.description": string;
  "rowFilter.StatValues.level": string;
  "rowFilter.StatValues.value": string;
  "rowFilter.StatValues.ascension": string;
  /** TeamPairs */
  "body.TeamPairs": definitions["TeamPairs"];
  "rowFilter.TeamPairs.id": string;
  "rowFilter.TeamPairs.name": string;
  "rowFilter.TeamPairs.description": string;
  "rowFilter.TeamPairs.owner": string;
  "rowFilter.TeamPairs.team1": string;
  "rowFilter.TeamPairs.team2": string;
  /** Teams */
  "body.Teams": definitions["Teams"];
  "rowFilter.Teams.id": string;
  "rowFilter.Teams.name": string;
  "rowFilter.Teams.description": string;
  "rowFilter.Teams.owner": string;
  "rowFilter.Teams.slot1": string;
  "rowFilter.Teams.slot2": string;
  "rowFilter.Teams.slot3": string;
  "rowFilter.Teams.slot4": string;
  /** WeaponCopies */
  "body.WeaponCopies": definitions["WeaponCopies"];
  "rowFilter.WeaponCopies.id": string;
  "rowFilter.WeaponCopies.weapon_id": string;
  "rowFilter.WeaponCopies.level": string;
  "rowFilter.WeaponCopies.refinement": string;
  "rowFilter.WeaponCopies.owner": string;
  "rowFilter.WeaponCopies.ascension": string;
  /** Weapons */
  "body.Weapons": definitions["Weapons"];
  "rowFilter.Weapons.id": string;
  "rowFilter.Weapons.name": string;
  "rowFilter.Weapons.description": string;
  "rowFilter.Weapons.rarity": string;
  "rowFilter.Weapons.type": string;
  "rowFilter.Weapons.base_atk": string;
  "rowFilter.Weapons.atk_multiplier": string;
  "rowFilter.Weapons.atk_ascension": string;
  "rowFilter.Weapons.ascension_base": string;
  "rowFilter.Weapons.ascension_level_multiplier": string;
}

export interface operations {}

export interface external {}
