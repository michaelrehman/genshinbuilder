/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/Artifact": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Artifact.id"];
          created_at?: parameters["rowFilter.Artifact.created_at"];
          set?: parameters["rowFilter.Artifact.set"];
          rarity?: parameters["rowFilter.Artifact.rarity"];
          type?: parameters["rowFilter.Artifact.type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Artifact"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Artifact */
          Artifact?: definitions["Artifact"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Artifact.id"];
          created_at?: parameters["rowFilter.Artifact.created_at"];
          set?: parameters["rowFilter.Artifact.set"];
          rarity?: parameters["rowFilter.Artifact.rarity"];
          type?: parameters["rowFilter.Artifact.type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Artifact.id"];
          created_at?: parameters["rowFilter.Artifact.created_at"];
          set?: parameters["rowFilter.Artifact.set"];
          rarity?: parameters["rowFilter.Artifact.rarity"];
          type?: parameters["rowFilter.Artifact.type"];
        };
        body: {
          /** Artifact */
          Artifact?: definitions["Artifact"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ArtifactCopy": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ArtifactCopy.id"];
          owner?: parameters["rowFilter.ArtifactCopy.owner"];
          created_at?: parameters["rowFilter.ArtifactCopy.created_at"];
          artifact_id?: parameters["rowFilter.ArtifactCopy.artifact_id"];
          level?: parameters["rowFilter.ArtifactCopy.level"];
          main_stat?: parameters["rowFilter.ArtifactCopy.main_stat"];
          sub_stat1?: parameters["rowFilter.ArtifactCopy.sub_stat1"];
          sub_stat2?: parameters["rowFilter.ArtifactCopy.sub_stat2"];
          sub_stat3?: parameters["rowFilter.ArtifactCopy.sub_stat3"];
          sub_stat4?: parameters["rowFilter.ArtifactCopy.sub_stat4"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ArtifactCopy"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ArtifactCopy */
          ArtifactCopy?: definitions["ArtifactCopy"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ArtifactCopy.id"];
          owner?: parameters["rowFilter.ArtifactCopy.owner"];
          created_at?: parameters["rowFilter.ArtifactCopy.created_at"];
          artifact_id?: parameters["rowFilter.ArtifactCopy.artifact_id"];
          level?: parameters["rowFilter.ArtifactCopy.level"];
          main_stat?: parameters["rowFilter.ArtifactCopy.main_stat"];
          sub_stat1?: parameters["rowFilter.ArtifactCopy.sub_stat1"];
          sub_stat2?: parameters["rowFilter.ArtifactCopy.sub_stat2"];
          sub_stat3?: parameters["rowFilter.ArtifactCopy.sub_stat3"];
          sub_stat4?: parameters["rowFilter.ArtifactCopy.sub_stat4"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ArtifactCopy.id"];
          owner?: parameters["rowFilter.ArtifactCopy.owner"];
          created_at?: parameters["rowFilter.ArtifactCopy.created_at"];
          artifact_id?: parameters["rowFilter.ArtifactCopy.artifact_id"];
          level?: parameters["rowFilter.ArtifactCopy.level"];
          main_stat?: parameters["rowFilter.ArtifactCopy.main_stat"];
          sub_stat1?: parameters["rowFilter.ArtifactCopy.sub_stat1"];
          sub_stat2?: parameters["rowFilter.ArtifactCopy.sub_stat2"];
          sub_stat3?: parameters["rowFilter.ArtifactCopy.sub_stat3"];
          sub_stat4?: parameters["rowFilter.ArtifactCopy.sub_stat4"];
        };
        body: {
          /** ArtifactCopy */
          ArtifactCopy?: definitions["ArtifactCopy"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ArtifactSet": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ArtifactSet.id"];
          created_at?: parameters["rowFilter.ArtifactSet.created_at"];
          name?: parameters["rowFilter.ArtifactSet.name"];
          one_piece_bonus?: parameters["rowFilter.ArtifactSet.one_piece_bonus"];
          two_piece_bonus?: parameters["rowFilter.ArtifactSet.two_piece_bonus"];
          four_piece_bonus?: parameters["rowFilter.ArtifactSet.four_piece_bonus"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ArtifactSet"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ArtifactSet */
          ArtifactSet?: definitions["ArtifactSet"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ArtifactSet.id"];
          created_at?: parameters["rowFilter.ArtifactSet.created_at"];
          name?: parameters["rowFilter.ArtifactSet.name"];
          one_piece_bonus?: parameters["rowFilter.ArtifactSet.one_piece_bonus"];
          two_piece_bonus?: parameters["rowFilter.ArtifactSet.two_piece_bonus"];
          four_piece_bonus?: parameters["rowFilter.ArtifactSet.four_piece_bonus"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ArtifactSet.id"];
          created_at?: parameters["rowFilter.ArtifactSet.created_at"];
          name?: parameters["rowFilter.ArtifactSet.name"];
          one_piece_bonus?: parameters["rowFilter.ArtifactSet.one_piece_bonus"];
          two_piece_bonus?: parameters["rowFilter.ArtifactSet.two_piece_bonus"];
          four_piece_bonus?: parameters["rowFilter.ArtifactSet.four_piece_bonus"];
        };
        body: {
          /** ArtifactSet */
          ArtifactSet?: definitions["ArtifactSet"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Build": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Build.id"];
          created_at?: parameters["rowFilter.Build.created_at"];
          name?: parameters["rowFilter.Build.name"];
          description?: parameters["rowFilter.Build.description"];
          owner?: parameters["rowFilter.Build.owner"];
          weapon?: parameters["rowFilter.Build.weapon"];
          flower?: parameters["rowFilter.Build.flower"];
          feather?: parameters["rowFilter.Build.feather"];
          sands?: parameters["rowFilter.Build.sands"];
          goblet?: parameters["rowFilter.Build.goblet"];
          circlet?: parameters["rowFilter.Build.circlet"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Build"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Build */
          Build?: definitions["Build"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Build.id"];
          created_at?: parameters["rowFilter.Build.created_at"];
          name?: parameters["rowFilter.Build.name"];
          description?: parameters["rowFilter.Build.description"];
          owner?: parameters["rowFilter.Build.owner"];
          weapon?: parameters["rowFilter.Build.weapon"];
          flower?: parameters["rowFilter.Build.flower"];
          feather?: parameters["rowFilter.Build.feather"];
          sands?: parameters["rowFilter.Build.sands"];
          goblet?: parameters["rowFilter.Build.goblet"];
          circlet?: parameters["rowFilter.Build.circlet"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Build.id"];
          created_at?: parameters["rowFilter.Build.created_at"];
          name?: parameters["rowFilter.Build.name"];
          description?: parameters["rowFilter.Build.description"];
          owner?: parameters["rowFilter.Build.owner"];
          weapon?: parameters["rowFilter.Build.weapon"];
          flower?: parameters["rowFilter.Build.flower"];
          feather?: parameters["rowFilter.Build.feather"];
          sands?: parameters["rowFilter.Build.sands"];
          goblet?: parameters["rowFilter.Build.goblet"];
          circlet?: parameters["rowFilter.Build.circlet"];
        };
        body: {
          /** Build */
          Build?: definitions["Build"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Character": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Character.id"];
          created_at?: parameters["rowFilter.Character.created_at"];
          name?: parameters["rowFilter.Character.name"];
          rarity?: parameters["rowFilter.Character.rarity"];
          element?: parameters["rowFilter.Character.element"];
          weapon_type?: parameters["rowFilter.Character.weapon_type"];
          base_hp?: parameters["rowFilter.Character.base_hp"];
          base_atk?: parameters["rowFilter.Character.base_atk"];
          base_def?: parameters["rowFilter.Character.base_def"];
          ascension_stat?: parameters["rowFilter.Character.ascension_stat"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Character"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Character */
          Character?: definitions["Character"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Character.id"];
          created_at?: parameters["rowFilter.Character.created_at"];
          name?: parameters["rowFilter.Character.name"];
          rarity?: parameters["rowFilter.Character.rarity"];
          element?: parameters["rowFilter.Character.element"];
          weapon_type?: parameters["rowFilter.Character.weapon_type"];
          base_hp?: parameters["rowFilter.Character.base_hp"];
          base_atk?: parameters["rowFilter.Character.base_atk"];
          base_def?: parameters["rowFilter.Character.base_def"];
          ascension_stat?: parameters["rowFilter.Character.ascension_stat"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Character.id"];
          created_at?: parameters["rowFilter.Character.created_at"];
          name?: parameters["rowFilter.Character.name"];
          rarity?: parameters["rowFilter.Character.rarity"];
          element?: parameters["rowFilter.Character.element"];
          weapon_type?: parameters["rowFilter.Character.weapon_type"];
          base_hp?: parameters["rowFilter.Character.base_hp"];
          base_atk?: parameters["rowFilter.Character.base_atk"];
          base_def?: parameters["rowFilter.Character.base_def"];
          ascension_stat?: parameters["rowFilter.Character.ascension_stat"];
        };
        body: {
          /** Character */
          Character?: definitions["Character"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/CharacterCopy": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.CharacterCopy.id"];
          created_at?: parameters["rowFilter.CharacterCopy.created_at"];
          owner?: parameters["rowFilter.CharacterCopy.owner"];
          ascension?: parameters["rowFilter.CharacterCopy.ascension"];
          level?: parameters["rowFilter.CharacterCopy.level"];
          constellations?: parameters["rowFilter.CharacterCopy.constellations"];
          default_build?: parameters["rowFilter.CharacterCopy.default_build"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["CharacterCopy"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** CharacterCopy */
          CharacterCopy?: definitions["CharacterCopy"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.CharacterCopy.id"];
          created_at?: parameters["rowFilter.CharacterCopy.created_at"];
          owner?: parameters["rowFilter.CharacterCopy.owner"];
          ascension?: parameters["rowFilter.CharacterCopy.ascension"];
          level?: parameters["rowFilter.CharacterCopy.level"];
          constellations?: parameters["rowFilter.CharacterCopy.constellations"];
          default_build?: parameters["rowFilter.CharacterCopy.default_build"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.CharacterCopy.id"];
          created_at?: parameters["rowFilter.CharacterCopy.created_at"];
          owner?: parameters["rowFilter.CharacterCopy.owner"];
          ascension?: parameters["rowFilter.CharacterCopy.ascension"];
          level?: parameters["rowFilter.CharacterCopy.level"];
          constellations?: parameters["rowFilter.CharacterCopy.constellations"];
          default_build?: parameters["rowFilter.CharacterCopy.default_build"];
        };
        body: {
          /** CharacterCopy */
          CharacterCopy?: definitions["CharacterCopy"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Role": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Role.id"];
          created_at?: parameters["rowFilter.Role.created_at"];
          character?: parameters["rowFilter.Role.character"];
          build?: parameters["rowFilter.Role.build"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Role"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Role */
          Role?: definitions["Role"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Role.id"];
          created_at?: parameters["rowFilter.Role.created_at"];
          character?: parameters["rowFilter.Role.character"];
          build?: parameters["rowFilter.Role.build"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Role.id"];
          created_at?: parameters["rowFilter.Role.created_at"];
          character?: parameters["rowFilter.Role.character"];
          build?: parameters["rowFilter.Role.build"];
        };
        body: {
          /** Role */
          Role?: definitions["Role"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/SetBonus": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.SetBonus.id"];
          created_at?: parameters["rowFilter.SetBonus.created_at"];
          description?: parameters["rowFilter.SetBonus.description"];
          set?: parameters["rowFilter.SetBonus.set"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["SetBonus"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** SetBonus */
          SetBonus?: definitions["SetBonus"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.SetBonus.id"];
          created_at?: parameters["rowFilter.SetBonus.created_at"];
          description?: parameters["rowFilter.SetBonus.description"];
          set?: parameters["rowFilter.SetBonus.set"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.SetBonus.id"];
          created_at?: parameters["rowFilter.SetBonus.created_at"];
          description?: parameters["rowFilter.SetBonus.description"];
          set?: parameters["rowFilter.SetBonus.set"];
        };
        body: {
          /** SetBonus */
          SetBonus?: definitions["SetBonus"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Stat": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Stat.id"];
          created_at?: parameters["rowFilter.Stat.created_at"];
          stat?: parameters["rowFilter.Stat.stat"];
          abbreviation?: parameters["rowFilter.Stat.abbreviation"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Stat"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Stat */
          Stat?: definitions["Stat"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Stat.id"];
          created_at?: parameters["rowFilter.Stat.created_at"];
          stat?: parameters["rowFilter.Stat.stat"];
          abbreviation?: parameters["rowFilter.Stat.abbreviation"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Stat.id"];
          created_at?: parameters["rowFilter.Stat.created_at"];
          stat?: parameters["rowFilter.Stat.stat"];
          abbreviation?: parameters["rowFilter.Stat.abbreviation"];
        };
        body: {
          /** Stat */
          Stat?: definitions["Stat"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/StatValue": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.StatValue.id"];
          created_at?: parameters["rowFilter.StatValue.created_at"];
          stat?: parameters["rowFilter.StatValue.stat"];
          description?: parameters["rowFilter.StatValue.description"];
          level?: parameters["rowFilter.StatValue.level"];
          value?: parameters["rowFilter.StatValue.value"];
          ascension?: parameters["rowFilter.StatValue.ascension"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["StatValue"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** StatValue */
          StatValue?: definitions["StatValue"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.StatValue.id"];
          created_at?: parameters["rowFilter.StatValue.created_at"];
          stat?: parameters["rowFilter.StatValue.stat"];
          description?: parameters["rowFilter.StatValue.description"];
          level?: parameters["rowFilter.StatValue.level"];
          value?: parameters["rowFilter.StatValue.value"];
          ascension?: parameters["rowFilter.StatValue.ascension"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.StatValue.id"];
          created_at?: parameters["rowFilter.StatValue.created_at"];
          stat?: parameters["rowFilter.StatValue.stat"];
          description?: parameters["rowFilter.StatValue.description"];
          level?: parameters["rowFilter.StatValue.level"];
          value?: parameters["rowFilter.StatValue.value"];
          ascension?: parameters["rowFilter.StatValue.ascension"];
        };
        body: {
          /** StatValue */
          StatValue?: definitions["StatValue"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Team": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Team.id"];
          created_at?: parameters["rowFilter.Team.created_at"];
          name?: parameters["rowFilter.Team.name"];
          description?: parameters["rowFilter.Team.description"];
          owner?: parameters["rowFilter.Team.owner"];
          slot1?: parameters["rowFilter.Team.slot1"];
          slot2?: parameters["rowFilter.Team.slot2"];
          slot3?: parameters["rowFilter.Team.slot3"];
          slot4?: parameters["rowFilter.Team.slot4"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Team"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Team */
          Team?: definitions["Team"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Team.id"];
          created_at?: parameters["rowFilter.Team.created_at"];
          name?: parameters["rowFilter.Team.name"];
          description?: parameters["rowFilter.Team.description"];
          owner?: parameters["rowFilter.Team.owner"];
          slot1?: parameters["rowFilter.Team.slot1"];
          slot2?: parameters["rowFilter.Team.slot2"];
          slot3?: parameters["rowFilter.Team.slot3"];
          slot4?: parameters["rowFilter.Team.slot4"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Team.id"];
          created_at?: parameters["rowFilter.Team.created_at"];
          name?: parameters["rowFilter.Team.name"];
          description?: parameters["rowFilter.Team.description"];
          owner?: parameters["rowFilter.Team.owner"];
          slot1?: parameters["rowFilter.Team.slot1"];
          slot2?: parameters["rowFilter.Team.slot2"];
          slot3?: parameters["rowFilter.Team.slot3"];
          slot4?: parameters["rowFilter.Team.slot4"];
        };
        body: {
          /** Team */
          Team?: definitions["Team"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/TeamPair": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.TeamPair.id"];
          created_at?: parameters["rowFilter.TeamPair.created_at"];
          name?: parameters["rowFilter.TeamPair.name"];
          description?: parameters["rowFilter.TeamPair.description"];
          owner?: parameters["rowFilter.TeamPair.owner"];
          team1?: parameters["rowFilter.TeamPair.team1"];
          team2?: parameters["rowFilter.TeamPair.team2"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["TeamPair"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** TeamPair */
          TeamPair?: definitions["TeamPair"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.TeamPair.id"];
          created_at?: parameters["rowFilter.TeamPair.created_at"];
          name?: parameters["rowFilter.TeamPair.name"];
          description?: parameters["rowFilter.TeamPair.description"];
          owner?: parameters["rowFilter.TeamPair.owner"];
          team1?: parameters["rowFilter.TeamPair.team1"];
          team2?: parameters["rowFilter.TeamPair.team2"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.TeamPair.id"];
          created_at?: parameters["rowFilter.TeamPair.created_at"];
          name?: parameters["rowFilter.TeamPair.name"];
          description?: parameters["rowFilter.TeamPair.description"];
          owner?: parameters["rowFilter.TeamPair.owner"];
          team1?: parameters["rowFilter.TeamPair.team1"];
          team2?: parameters["rowFilter.TeamPair.team2"];
        };
        body: {
          /** TeamPair */
          TeamPair?: definitions["TeamPair"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Weapon": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Weapon.id"];
          created_at?: parameters["rowFilter.Weapon.created_at"];
          name?: parameters["rowFilter.Weapon.name"];
          description?: parameters["rowFilter.Weapon.description"];
          rarity?: parameters["rowFilter.Weapon.rarity"];
          type?: parameters["rowFilter.Weapon.type"];
          base_atk?: parameters["rowFilter.Weapon.base_atk"];
          secondary_stat?: parameters["rowFilter.Weapon.secondary_stat"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Weapon"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Weapon */
          Weapon?: definitions["Weapon"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Weapon.id"];
          created_at?: parameters["rowFilter.Weapon.created_at"];
          name?: parameters["rowFilter.Weapon.name"];
          description?: parameters["rowFilter.Weapon.description"];
          rarity?: parameters["rowFilter.Weapon.rarity"];
          type?: parameters["rowFilter.Weapon.type"];
          base_atk?: parameters["rowFilter.Weapon.base_atk"];
          secondary_stat?: parameters["rowFilter.Weapon.secondary_stat"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Weapon.id"];
          created_at?: parameters["rowFilter.Weapon.created_at"];
          name?: parameters["rowFilter.Weapon.name"];
          description?: parameters["rowFilter.Weapon.description"];
          rarity?: parameters["rowFilter.Weapon.rarity"];
          type?: parameters["rowFilter.Weapon.type"];
          base_atk?: parameters["rowFilter.Weapon.base_atk"];
          secondary_stat?: parameters["rowFilter.Weapon.secondary_stat"];
        };
        body: {
          /** Weapon */
          Weapon?: definitions["Weapon"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/WeaponCopy": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.WeaponCopy.id"];
          created_at?: parameters["rowFilter.WeaponCopy.created_at"];
          weapon_id?: parameters["rowFilter.WeaponCopy.weapon_id"];
          level?: parameters["rowFilter.WeaponCopy.level"];
          refinement?: parameters["rowFilter.WeaponCopy.refinement"];
          owner?: parameters["rowFilter.WeaponCopy.owner"];
          ascension?: parameters["rowFilter.WeaponCopy.ascension"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["WeaponCopy"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** WeaponCopy */
          WeaponCopy?: definitions["WeaponCopy"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.WeaponCopy.id"];
          created_at?: parameters["rowFilter.WeaponCopy.created_at"];
          weapon_id?: parameters["rowFilter.WeaponCopy.weapon_id"];
          level?: parameters["rowFilter.WeaponCopy.level"];
          refinement?: parameters["rowFilter.WeaponCopy.refinement"];
          owner?: parameters["rowFilter.WeaponCopy.owner"];
          ascension?: parameters["rowFilter.WeaponCopy.ascension"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.WeaponCopy.id"];
          created_at?: parameters["rowFilter.WeaponCopy.created_at"];
          weapon_id?: parameters["rowFilter.WeaponCopy.weapon_id"];
          level?: parameters["rowFilter.WeaponCopy.level"];
          refinement?: parameters["rowFilter.WeaponCopy.refinement"];
          owner?: parameters["rowFilter.WeaponCopy.owner"];
          ascension?: parameters["rowFilter.WeaponCopy.ascension"];
        };
        body: {
          /** WeaponCopy */
          WeaponCopy?: definitions["WeaponCopy"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  /** Data on individual artifacts */
  Artifact: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at?: string;
    /**
     * Note:
     * This is a Foreign Key to `ArtifactSet.id`.<fk table='ArtifactSet' column='id'/>
     */
    set: number;
    rarity: number;
    type: "flower" | "feather" | "sands" | "goblet" | "circlet";
  };
  /** Actual instance of an artifact */
  ArtifactCopy: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    owner: string;
    created_at?: string;
    /**
     * Note:
     * This is a Foreign Key to `Artifact.id`.<fk table='Artifact' column='id'/>
     */
    artifact_id: number;
    level: number;
    /**
     * Note:
     * This is a Foreign Key to `StatValue.id`.<fk table='StatValue' column='id'/>
     */
    main_stat: number;
    /**
     * Note:
     * This is a Foreign Key to `StatValue.id`.<fk table='StatValue' column='id'/>
     */
    sub_stat1?: number;
    /**
     * Note:
     * This is a Foreign Key to `StatValue.id`.<fk table='StatValue' column='id'/>
     */
    sub_stat2?: number;
    /**
     * Note:
     * This is a Foreign Key to `StatValue.id`.<fk table='StatValue' column='id'/>
     */
    sub_stat3?: number;
    /**
     * Note:
     * This is a Foreign Key to `StatValue.id`.<fk table='StatValue' column='id'/>
     */
    sub_stat4?: number;
  };
  /** Artifact sets in game */
  ArtifactSet: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at?: string;
    name: string;
    /**
     * Note:
     * This is a Foreign Key to `SetBonus.id`.<fk table='SetBonus' column='id'/>
     */
    one_piece_bonus?: number;
    /**
     * Note:
     * This is a Foreign Key to `SetBonus.id`.<fk table='SetBonus' column='id'/>
     */
    two_piece_bonus?: number;
    /**
     * Note:
     * This is a Foreign Key to `SetBonus.id`.<fk table='SetBonus' column='id'/>
     */
    four_piece_bonus?: number;
  };
  Build: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at?: string;
    name: string;
    description?: string;
    owner: string;
    /**
     * Note:
     * This is a Foreign Key to `WeaponCopy.id`.<fk table='WeaponCopy' column='id'/>
     */
    weapon: number;
    /**
     * Note:
     * This is a Foreign Key to `ArtifactCopy.id`.<fk table='ArtifactCopy' column='id'/>
     */
    flower?: number;
    /**
     * Note:
     * This is a Foreign Key to `ArtifactCopy.id`.<fk table='ArtifactCopy' column='id'/>
     */
    feather?: number;
    /**
     * Note:
     * This is a Foreign Key to `ArtifactCopy.id`.<fk table='ArtifactCopy' column='id'/>
     */
    sands?: number;
    /**
     * Note:
     * This is a Foreign Key to `ArtifactCopy.id`.<fk table='ArtifactCopy' column='id'/>
     */
    goblet?: number;
    /**
     * Note:
     * This is a Foreign Key to `ArtifactCopy.id`.<fk table='ArtifactCopy' column='id'/>
     */
    circlet?: number;
  };
  /** Character data */
  Character: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at?: string;
    name: string;
    rarity: number;
    element: "Anemo" | "Geo" | "Electro" | "Hydro" | "Cryo" | "Pyro" | "Dendro";
    weapon_type: "Sword" | "Claymore" | "Spear" | "Catalyst" | "Bow";
    /**
     * Note:
     * This is a Foreign Key to `StatValue.id`.<fk table='StatValue' column='id'/>
     */
    base_hp: number;
    /**
     * Note:
     * This is a Foreign Key to `StatValue.id`.<fk table='StatValue' column='id'/>
     */
    base_atk: number;
    /**
     * Note:
     * This is a Foreign Key to `StatValue.id`.<fk table='StatValue' column='id'/>
     */
    base_def: number;
    /**
     * Note:
     * This is a Foreign Key to `StatValue.id`.<fk table='StatValue' column='id'/>
     */
    ascension_stat: number;
  };
  /** Actual instance of a character */
  CharacterCopy: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at?: string;
    owner: string;
    ascension: number;
    level: number;
    constellations: number;
    /**
     * Note:
     * This is a Foreign Key to `Build.id`.<fk table='Build' column='id'/>
     */
    default_build?: number;
  };
  /** Pairs characters with builds in a team */
  Role: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at?: string;
    /**
     * Note:
     * This is a Foreign Key to `CharacterCopy.id`.<fk table='CharacterCopy' column='id'/>
     */
    character: number;
    /**
     * Note:
     * This is a Foreign Key to `Build.id`.<fk table='Build' column='id'/>
     */
    build?: number;
  };
  /** Artifact set bonus descriptions */
  SetBonus: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at?: string;
    description: string;
    /**
     * Note:
     * This is a Foreign Key to `ArtifactSet.id`.<fk table='ArtifactSet' column='id'/>
     */
    set: number;
  };
  /** The types of stats a character/weapon/artifact can have */
  Stat: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at?: string;
    stat: string;
    abbreviation: string;
  };
  /** Actual stat values of characters/weapons/artifacts */
  StatValue: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at?: string;
    /**
     * Note:
     * This is a Foreign Key to `Stat.id`.<fk table='Stat' column='id'/>
     */
    stat: number;
    description?: string;
    level?: unknown[];
    value: unknown[];
    ascension?: unknown[];
  };
  /** Collection of roles */
  Team: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at?: string;
    name: string;
    description?: string;
    owner: string;
    /**
     * Note:
     * This is a Foreign Key to `Role.id`.<fk table='Role' column='id'/>
     */
    slot1?: number;
    /**
     * Note:
     * This is a Foreign Key to `Role.id`.<fk table='Role' column='id'/>
     */
    slot2?: number;
    /**
     * Note:
     * This is a Foreign Key to `Role.id`.<fk table='Role' column='id'/>
     */
    slot3?: number;
    /**
     * Note:
     * This is a Foreign Key to `Role.id`.<fk table='Role' column='id'/>
     */
    slot4?: number;
  };
  /** For spiral and events */
  TeamPair: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at?: string;
    name: string;
    description?: string;
    owner: string;
    /**
     * Note:
     * This is a Foreign Key to `Team.id`.<fk table='Team' column='id'/>
     */
    team1: number;
    /**
     * Note:
     * This is a Foreign Key to `Team.id`.<fk table='Team' column='id'/>
     */
    team2: number;
  };
  /** Data on weapons */
  Weapon: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at?: string;
    name: string;
    description: string;
    rarity: number;
    type: "Sword" | "Claymore" | "Spear" | "Catalyst" | "Bow";
    /**
     * Note:
     * This is a Foreign Key to `StatValue.id`.<fk table='StatValue' column='id'/>
     */
    base_atk: number;
    /**
     * Note:
     * This is a Foreign Key to `StatValue.id`.<fk table='StatValue' column='id'/>
     */
    secondary_stat: number;
  };
  /** Actual instance of a weapon */
  WeaponCopy: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at?: string;
    /**
     * Note:
     * This is a Foreign Key to `Weapon.id`.<fk table='Weapon' column='id'/>
     */
    weapon_id: number;
    level: number;
    refinement: number;
    owner: string;
    ascension: number;
  };
}

export interface parameters {
  /** Preference */
  preferParams: "params=single-object";
  /** Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** Preference */
  preferCount: "count=none";
  /** Filtering Columns */
  select: string;
  /** On Conflict */
  on_conflict: string;
  /** Ordering */
  order: string;
  /** Limiting and Pagination */
  range: string;
  /** Limiting and Pagination */
  rangeUnit: string;
  /** Limiting and Pagination */
  offset: string;
  /** Limiting and Pagination */
  limit: string;
  /** Artifact */
  "body.Artifact": definitions["Artifact"];
  "rowFilter.Artifact.id": string;
  "rowFilter.Artifact.created_at": string;
  "rowFilter.Artifact.set": string;
  "rowFilter.Artifact.rarity": string;
  "rowFilter.Artifact.type": string;
  /** ArtifactCopy */
  "body.ArtifactCopy": definitions["ArtifactCopy"];
  "rowFilter.ArtifactCopy.id": string;
  "rowFilter.ArtifactCopy.owner": string;
  "rowFilter.ArtifactCopy.created_at": string;
  "rowFilter.ArtifactCopy.artifact_id": string;
  "rowFilter.ArtifactCopy.level": string;
  "rowFilter.ArtifactCopy.main_stat": string;
  "rowFilter.ArtifactCopy.sub_stat1": string;
  "rowFilter.ArtifactCopy.sub_stat2": string;
  "rowFilter.ArtifactCopy.sub_stat3": string;
  "rowFilter.ArtifactCopy.sub_stat4": string;
  /** ArtifactSet */
  "body.ArtifactSet": definitions["ArtifactSet"];
  "rowFilter.ArtifactSet.id": string;
  "rowFilter.ArtifactSet.created_at": string;
  "rowFilter.ArtifactSet.name": string;
  "rowFilter.ArtifactSet.one_piece_bonus": string;
  "rowFilter.ArtifactSet.two_piece_bonus": string;
  "rowFilter.ArtifactSet.four_piece_bonus": string;
  /** Build */
  "body.Build": definitions["Build"];
  "rowFilter.Build.id": string;
  "rowFilter.Build.created_at": string;
  "rowFilter.Build.name": string;
  "rowFilter.Build.description": string;
  "rowFilter.Build.owner": string;
  "rowFilter.Build.weapon": string;
  "rowFilter.Build.flower": string;
  "rowFilter.Build.feather": string;
  "rowFilter.Build.sands": string;
  "rowFilter.Build.goblet": string;
  "rowFilter.Build.circlet": string;
  /** Character */
  "body.Character": definitions["Character"];
  "rowFilter.Character.id": string;
  "rowFilter.Character.created_at": string;
  "rowFilter.Character.name": string;
  "rowFilter.Character.rarity": string;
  "rowFilter.Character.element": string;
  "rowFilter.Character.weapon_type": string;
  "rowFilter.Character.base_hp": string;
  "rowFilter.Character.base_atk": string;
  "rowFilter.Character.base_def": string;
  "rowFilter.Character.ascension_stat": string;
  /** CharacterCopy */
  "body.CharacterCopy": definitions["CharacterCopy"];
  "rowFilter.CharacterCopy.id": string;
  "rowFilter.CharacterCopy.created_at": string;
  "rowFilter.CharacterCopy.owner": string;
  "rowFilter.CharacterCopy.ascension": string;
  "rowFilter.CharacterCopy.level": string;
  "rowFilter.CharacterCopy.constellations": string;
  "rowFilter.CharacterCopy.default_build": string;
  /** Role */
  "body.Role": definitions["Role"];
  "rowFilter.Role.id": string;
  "rowFilter.Role.created_at": string;
  "rowFilter.Role.character": string;
  "rowFilter.Role.build": string;
  /** SetBonus */
  "body.SetBonus": definitions["SetBonus"];
  "rowFilter.SetBonus.id": string;
  "rowFilter.SetBonus.created_at": string;
  "rowFilter.SetBonus.description": string;
  "rowFilter.SetBonus.set": string;
  /** Stat */
  "body.Stat": definitions["Stat"];
  "rowFilter.Stat.id": string;
  "rowFilter.Stat.created_at": string;
  "rowFilter.Stat.stat": string;
  "rowFilter.Stat.abbreviation": string;
  /** StatValue */
  "body.StatValue": definitions["StatValue"];
  "rowFilter.StatValue.id": string;
  "rowFilter.StatValue.created_at": string;
  "rowFilter.StatValue.stat": string;
  "rowFilter.StatValue.description": string;
  "rowFilter.StatValue.level": string;
  "rowFilter.StatValue.value": string;
  "rowFilter.StatValue.ascension": string;
  /** Team */
  "body.Team": definitions["Team"];
  "rowFilter.Team.id": string;
  "rowFilter.Team.created_at": string;
  "rowFilter.Team.name": string;
  "rowFilter.Team.description": string;
  "rowFilter.Team.owner": string;
  "rowFilter.Team.slot1": string;
  "rowFilter.Team.slot2": string;
  "rowFilter.Team.slot3": string;
  "rowFilter.Team.slot4": string;
  /** TeamPair */
  "body.TeamPair": definitions["TeamPair"];
  "rowFilter.TeamPair.id": string;
  "rowFilter.TeamPair.created_at": string;
  "rowFilter.TeamPair.name": string;
  "rowFilter.TeamPair.description": string;
  "rowFilter.TeamPair.owner": string;
  "rowFilter.TeamPair.team1": string;
  "rowFilter.TeamPair.team2": string;
  /** Weapon */
  "body.Weapon": definitions["Weapon"];
  "rowFilter.Weapon.id": string;
  "rowFilter.Weapon.created_at": string;
  "rowFilter.Weapon.name": string;
  "rowFilter.Weapon.description": string;
  "rowFilter.Weapon.rarity": string;
  "rowFilter.Weapon.type": string;
  "rowFilter.Weapon.base_atk": string;
  "rowFilter.Weapon.secondary_stat": string;
  /** WeaponCopy */
  "body.WeaponCopy": definitions["WeaponCopy"];
  "rowFilter.WeaponCopy.id": string;
  "rowFilter.WeaponCopy.created_at": string;
  "rowFilter.WeaponCopy.weapon_id": string;
  "rowFilter.WeaponCopy.level": string;
  "rowFilter.WeaponCopy.refinement": string;
  "rowFilter.WeaponCopy.owner": string;
  "rowFilter.WeaponCopy.ascension": string;
}

export interface operations {}

export interface external {}
